
// TODO: implement
// [x] import/export (with renames)
// [x] type creation
// [x] structs
// [ ] binary operator definitions eg: '+'
// [ ] for stmt maybe?
// [ ] function attributes
// [ ] lists as core types
//     [ ] native memory allocation
// [ ] threading
//     [ ] session-types



// language features:
//
// ## ATTRIBUTES ##
//
// attributes for variables:
//   def: value is defined in compile time. Can be opimizied
//     to hell and back.
//   const (default): value is imutable, but assumed to be unknown at
//     compile. Won't be optimized out.
//   var: value mutable whithin linear execution.
//     Typical variable behaviour.
//   static: its value won't be lost between function calls. A
//     static variable's value is stored in the data segment.
//   volatile: value is mutable, and can change between reads
//     during execution. No execution optimizations are
//     applied.
//
// attributes for functions:
//   fuction with an attribute 'a' requires that all its
//     arguments be at least as restrictive as 'a'.
//   def: function is computed and substituted by the return
//     value during compilation. Requires that its arguments
//     also have the def attribute.
//   const (default): requires that the function must be implemented in
//     code space, i.e. it can't be optimized out.
//   var: normal expected function behaviour. Can be
//     optimized out, or inlined.
//   volatile: The function executes every line in the written
//     order. No execution optimizations are applied.
//
//
// ## POLYMORPHISM ##
//
// // Explicit polymorphism is redundant.
// // The complexity of type-checking greatly outweighs, its type well-formedness.
// // Values can be passed polymorphically through anonymous addresses and casts.
// // After all a polymorphic function isn't necessarily programmed for ALL types.
// // Especially from a low-level point of view.
// Polymorphism is NOT redundant. Verbose and complex, possibly. So
// let's make it as little verbose and complex as possible.
// Polymorphism allows type agnostic functions to be called and
// not disrupt a strong typed context. That is well-typedness is not
// lost by otherwise calling type-less pointers (e.g. @). Making '@'
// an invalid type. A polymorphic sort function could have the
// following signature: "sort : [<a>] -> [<a>]".
//
// How do polymorphic functions behave in the prensence of overloads?
//     If a specific type implementation of  a function is equivalent
//     to a polymorphic implementation of a function with the same
//     name, the specific type case is always preferred. For example:
//     if a specific implementation of the 'sort' function for integers
//     exists, it is going to be preferred for sorting a list of
//     integers, instead of its polymorphic counterpart.
//
//
// ## PATTERN MATCHING ##
//
// Pattern matching (for types) can be achieve through function
//   overloading.
// Pattern matching (for values) could possibly be implemented.
//   Altough could possibly be implemented, through sugary syntaxed
//   switch case statements...
//
//
// ## f a b   /vs/   f(a,b) ##
// after a lot of pondering over the cons and pros of both syntax
// aproaches, the conclusion is that a free 'f a b' syntax involves
// A LOT of complexity for compilation. Resolving most expressions
// only at type checking. Resulting in VERY HIGH compilation times.
// On the other hand, 'f(a,b)' syntax is very easy to parse but doesn't
// allow for infix functions such as 'a + b'. It also makes the uses of
// a pipe operator a bit unintuitive.
//
// To overcome this, the solution passes for an hybrid approach where
// the default syntax is 'f(a,b)' but alows an exception for 1 to 2
// arguments infix functions, such as '1 + 2', 'a++'. '++a' Is not valid.
// The pipe operator can be implemente alognside a receptacle operator:
// 'f(a, b) |> g(., c);' This pipe/receptacle operator is semantical (an
// infix bioperator)

file : [s_export] [s_import] (g_stmt)*

s_export : "export" "{" s_decl* "}" ";"
s_import : "import" NAME ["as" NAME] "{" s_decl* "}" ";"

?g_stmt : s_nop | s_decl | s_data | s_func | s_type | s_enum 
s_nop  : ";"
s_decl : (sig_data | sig_func) ";"
s_data : sig_data "=" exp ";"
s_func : (sig_func | sig_fix) block ";"
  block : "{" stmt* "}"

sig_data : NAME [attr] ":" t_data
sig_func : NAME [attr] ":" t_func
sig_fix  : (("`" NAME "`") | SYMBOL) [attr] ":" t_fix
attr : NAME

s_type : NAME "::" t_data ";"
s_enum : NAME "#" "{" enum_list "}" ";"
  enum_list : enum_elem ("," enum_elem)*
  enum_elem : NAME ["=" int_lit]

?type : t_paren | t_func
      | t_fix | t_data
t_paren : "(" type ")"
t_func  : [t_data] "("[param_list]")"
t_fix   : [t_data] "("[param_list]")" "("[param_list]")"
  param_list : param ("," param)*
    param : NAME t_data

// t_data: every type whose value's size, in memory, is deducible by
// the type alone. i.e. everything except a function.
?t_data : t_alias | t_addr | t_struct | t_array
t_addr   : (t_data | t_paren) "@"
t_struct : "{" t_data_list "}"
  t_data_list : t_data (";" t_data)* ";"?
t_alias  : NAME
t_array  : t_data "[" [int_lit] "]"
//t_sized  : int_lit
//t_union : basic_type "||" type    // unions seem a bit anti-type
// corrected-ness. if you want to access data in different ways,
// create a custom a type and use an explicit cast function.

?stmt : s_nop | s_decl | s_data | s_func
      | s_comp | s_if | s_while | s_do
      | s_ret | s_tail | s_cont | s_break
s_comp  : exp ";"
s_if    : "if" e_basic "then" block "else" block ";"
s_while : "while" e_basic "do" block ";"
s_do    : "do" block "while" e_basic ";"
s_ret   : "ret" [exp] ";"
s_tail  : "tail" e_call ";"
s_cont  : "continue" ";"
s_break : "brake" ";"

?exp : e_basic | e_assign | e_index | e_if
    | e_prefix | e_suffix | e_infix
e_assign : exp "=" exp
e_index  : e_basic "[" exp "]"
e_if     : "if" e_basic "then" e_basic "else" e_basic
e_prefix : SYMBOL e_basic
e_suffix : exp SYMBOL
e_infix  : exp SYMBOL e_basic

?e_basic : e_paren | e_array | e_call
         | e_member | e_recep | e_lambda | terminal
e_paren : "(" exp ")"
e_array : "{" exp_list "}"
e_call  : NAME "(" exp_list ")"
  exp_list : exp ("," exp)*
e_member: NAME "." (e_member | NAME)
e_recep : "."
e_lambda: "\\" [":" type] block
// e_read   : "@" basic_exp   // its just a case of an e_prefix
//     | exp ":>" type                     -> cast
// casts are to be defined like infix functions, not as
// a grammar rule. They are, in fact, type convertion functions.
// Unops and biops should be all defined as funcions.

?terminal : NAME | int_lit | STRING | CHAR
?int_lit : HEX | BIN | DECIMAL | ZERO
?id : NAME | SYMBOL

DECIMAL : /[1-9][0-9]*/
HEX.2 : /0x[0-9a-fA-F]+/
BIN.2 : /0b[01]+/
ZERO : /0/

NAME : /[_a-zA-Z][_a-zA-Z0-9]*/
SYMBOL : /[^\w\s(){}\[\],.;=`@!?][^\w\s(){}\[\],.;@!?]*/

STRING : /"([\S ])*?"/
CHAR : /'([\S ])*?'/

LINE_COMMENT : /\.\..*/

%ignore LINE_COMMENT
%ignore " "|"\t"|"\n"|"\r"


